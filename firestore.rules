/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles.
 *
 * Data Structure:
 * All user profile data is stored under the /users/{userId} path, where {userId}
 * corresponds to the Firebase Authentication UID.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Listing all user profiles is explicitly denied.
 *
 * Denormalization for Authorization:
 *  - The Firebase Auth UID is implicitly denormalized by being present in the document path itself (/users/{userId}).
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create, update, get, delete) Authenticated user with matching UID.
     * @deny (create, update, get, delete) Authenticated user with non-matching UID.
     * @deny list: Listing of user documents is not permitted.
     * @principle Enforces document ownership: users can only access their own profile.
     */
    match /users/{userId} {
      // Helper function to check if the authenticated user is the owner of the document.
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      // Helper function to check if the authenticated user is the owner of the EXISTING document.
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      // Allow a user to create their own profile if the userId in the path matches their auth UID.
      allow create: if isOwner(userId);

      // Allow a user to get their own profile if the userId in the path matches their auth UID.
      allow get: if isOwner(userId);

      // Allow a user to update their own profile if the userId in the path matches their auth UID and the document exists.
      allow update: if isExistingOwner(userId);

      // Allow a user to delete their own profile if the userId in the path matches their auth UID and the document exists.
      allow delete: if isExistingOwner(userId);

      // Do not allow listing of all users.
      allow list: if false;
    }
  }
}