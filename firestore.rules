rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    /**
     * @description This ruleset enforces a strict user-ownership model for user profiles and their addresses.
     * All data is nested under /users/{userId}. Only the authenticated user can read and write their own profile and addresses.
     * Key Security Decisions:
     *   - Users can only access their own data. No listing of all users is allowed.
     */

    // Helper function to check if the request is authenticated.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the requested user ID matches the authenticated user's ID.
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // Helper function to check if the requested user ID matches the authenticated user's ID, and the resource exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (get) User with ID 'user123' can read their own profile. (auth.uid: 'user123')
     * @allow (create) User with ID 'user123' can create their own profile. (auth.uid: 'user123')
     * @allow (update) User with ID 'user123' can update their own profile. (auth.uid: 'user123')
     * @allow (delete) User with ID 'user123' can delete their own profile. (auth.uid: 'user123')
     * @deny (get) User with ID 'user456' cannot read the profile of user 'user123'. (auth.uid: 'user456')
     * @deny (create) User with ID 'user456' cannot create the profile of user 'user123'. (auth.uid: 'user456')
     * @deny (update) User with ID 'user456' cannot update the profile of user 'user123'. (auth.uid: 'user456')
     * @deny (delete) User with ID 'user456' cannot delete the profile of user 'user123'. (auth.uid: 'user456')
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to a user's shipping addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get) User with ID 'user123' can read their own address with ID 'address001'. (auth.uid: 'user123')
     * @allow (create) User with ID 'user123' can create a new address under their profile. (auth.uid: 'user123')
     * @allow (update) User with ID 'user123' can update their own address with ID 'address001'. (auth.uid: 'user123')
     * @allow (delete) User with ID 'user123' can delete their own address with ID 'address001'. (auth.uid: 'user123')
     * @deny (get) User with ID 'user456' cannot read the address of user 'user123'. (auth.uid: 'user456')
     * @deny (create) User with ID 'user456' cannot create an address for user 'user123'. (auth.uid: 'user456')
     * @deny (update) User with ID 'user456' cannot update the address of user 'user123'. (auth.uid: 'user456')
     * @deny (delete) User with ID 'user456' cannot delete the address of user 'user123'. (auth.uid: 'user456')
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/addresses/{addressId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}