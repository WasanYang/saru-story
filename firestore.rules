/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Each user can only
 * access their own profile information and shipping addresses.  Data validation
 * is relaxed to allow for rapid prototyping.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile information.
 * - /users/{userId}/addresses/{addressId}: Stores user shipping addresses.
 *
 * Key Security Decisions:
 * - Users can only read and write their own profile data.
 * - Users can only manage their own shipping addresses.
 * - Listing all users is disallowed.
 *
 * Denormalization for Authorization:
 *  - The rules rely on the path /users/{userId} to enforce ownership, avoiding the need to store the userId inside the user document itself.
 *
 * Structural Segregation:
 *  - Private user data (profiles, addresses) is stored under the /users/{userId} collection, ensuring it is not publicly accessible.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the owner can read and write their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) - User with UID 'user123' can read/update/delete their own profile document.
     *   - Request: auth.uid = 'user123', path = '/databases/(default)/documents/users/user123'
     * @allow (create) - User with UID 'user123' can create their profile document if the userId matches their UID.
     *   - Request: auth.uid = 'user123', path = '/databases/(default)/documents/users/user123'
     * @deny (get, update, delete) - User with UID 'user456' cannot read/update/delete the profile document of user 'user123'.
     *   - Request: auth.uid = 'user456', path = '/databases/(default)/documents/users/user123'
     * @deny (create) - User with UID 'user456' cannot create a profile for user 'user123'.
     *   - Request: auth.uid = 'user456', path = '/databases/(default)/documents/users/user123'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects user addresses. Only the owner can read and write their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get, list, create, update, delete) - User with UID 'user123' can manage their own address documents under /users/user123/addresses/.
     *   - Request: auth.uid = 'user123', path = '/databases/(default)/documents/users/user123/addresses/address456'
     * @deny (get, list, create, update, delete) - User with UID 'user456' cannot manage address documents under /users/user123/addresses/.
     *   - Request: auth.uid = 'user456', path = '/databases/(default)/documents/users/user123/addresses/address456'
     * @principle Enforces document ownership for all operations on addresses.
     */
    match /users/{userId}/addresses/{addressId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}