rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces a strict user-ownership model for profile data.  Users can only read and write their own profile information.
     * @path /users/{userId}
     * @allow (get) auth.uid == userId
     * @allow (list) auth.uid == userId
     * @allow (create) auth.uid == userId
     * @allow (update) auth.uid == userId
     * @allow (delete) auth.uid == userId
     * @deny (get) auth.uid != userId
     * @deny (list) auth.uid != userId
     * @deny (create) auth.uid != userId
     * @deny (update) auth.uid != userId
     * @deny (delete) auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Read permissions: Only the user can read their own profile.
      allow get, list: if isOwner(userId);

      // Write permissions: Only the user can create, update, or delete their own profile.
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId) && isOwner(userId) && request.auth.uid == userId;
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    /**
     * @description Enforces a strict user-ownership model for shipping addresses. Users can only read and write their own addresses.
     * @path /users/{userId}/addresses/{addressId}
     * @allow (get) auth.uid == userId
     * @allow (list) auth.uid == userId
     * @allow (create) auth.uid == userId
     * @allow (update) auth.uid == userId
     * @allow (delete) auth.uid == userId
     * @deny (get) auth.uid != userId
     * @deny (list) auth.uid != userId
     * @deny (create) auth.uid != userId
     * @deny (update) auth.uid != userId
     * @deny (delete) auth.uid != userId
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/addresses/{addressId} {
      // Read permissions: Only the user can read their own addresses.
      allow get, list: if isOwner(userId);

      // Write permissions: Only the user can create, update, or delete their own addresses.
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId) && isOwner(userId);
      allow delete: if isExistingOwner(userId) && isOwner(userId);
    }

    // --- Helper functions ---

    // Checks if the request is made by the owner of the document.
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Checks if the request is made by the existing owner of the document, and that the document exists.
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}